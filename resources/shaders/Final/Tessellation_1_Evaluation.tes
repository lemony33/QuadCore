#version 430 core


layout (triangles, equal_spacing, ccw) in;
//layout (triangles, equal_spacing) in;


uniform mat4 model;				// model matrix (물체)
uniform mat4 view;				// view matrix (카메라)
uniform mat4 projection;		// projection matrix (사영)

uniform int i_normal_viewer;	// normal viwer ON/OFF (법선벡터 활성화 판단하는 변수)

in TCS_OUT
{
	vec2 texCoord0;  //texture
	vec3 normal0;    //lighting	
	vec3 FragPos;
} tes_in[];


out TES_OUT
{
	vec2 texCoord0;  //texture
	vec3 normal0;    //lighting
	vec3 FragPos;
} tes_out;



vec4 evaluate_patch(vec3 at)
{
/*
	vec4 P[4];
	int i;


	P[i] = (	gl_in[0].gl_Position,
				gl_in[1].gl_Position,
				gl_in[2].gl_Position,
				at.y
			);
*/
	return (	at.x * gl_in[0].gl_Position
					 +	at.y * gl_in[1].gl_Position
					 +	at.z * gl_in[2].gl_Position
					);
}

/*
//vec4 position = evaluate_patch(gl_TessCoord.xyz);

	const float epsilon = 0.001;
	vec4 p1 = evaluate_patch(gl_TessCoord.xyz + vec3(epsilon, 0.0, 0.0));
	vec4 p2 = evaluate_patch(gl_TessCoord.xyz + vec3(0.0, epsilon, 0.0));
	vec4 p3 = evaluate_patch(gl_TessCoord.xyz + vec3(0.0, 0.0, epsilon));

	vec3 v1 = normalize(p2.xyz - p1.xyz);
	vec3 v2 = normalize(p3.xyz - p1.xyz);

	//tes_out.normal0 = cross(v1, v2);
	vec3 normal_vec = cross(v1, v2);
*/

void main()
{
	mat4 MVP = projection * view *  model;


	////////////////////////////

	vec3 p1 = gl_in[0].gl_Position.xyz;
	vec3 p2 = gl_in[1].gl_Position.xyz;
	vec3 p3 = gl_in[2].gl_Position.xyz;

	vec3 n1 = tes_in[0].normal0;
	vec3 n2 = tes_in[1].normal0;
	vec3 n3 = tes_in[2].normal0;

	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	vec3 b300 = p1;
	vec3 b030 = p2;
	vec3 b003 = p3;
	float w12 = dot( p2 - p1, n1 );
	float w21 = dot( p1 - p2, n2 );
	float w13 = dot( p3 - p1, n1 );
	float w31 = dot( p1 - p3, n3 );
	float w23 = dot( p3 - p2, n2 );
	float w32 = dot( p2 - p3, n3 );

	vec3 b210 = ( 2.*p1 + p2 - w12*n1 ) / 3.;
	vec3 b120 = ( 2.*p2 + p1 - w21*n2 ) / 3.;
	vec3 b021 = ( 2.*p2 + p3 - w23*n2 ) / 3.;
	vec3 b012 = ( 2.*p3 + p2 - w32*n3 ) / 3.;
	vec3 b102 = ( 2.*p3 + p1 - w31*n3 ) / 3.;
	vec3 b201 = ( 2.*p1 + p3 - w13*n1 ) / 3.;
	vec3 ee = ( b210 + b120 + b021 + b012 + b102 + b201 ) / 6.;
	vec3 vv = ( p1 + p2 + p3 ) / 3.;
	vec3 b111 = ee + ( ee - vv ) / 2.;

	vec3 xyz =  1.0*b300*w*w*w + 1.0*b030*u*u*u + 1.0*b003*v*v*v +
				3.0*b210*u*w*w + 3.0*b120*u*u*w + 3.0*b201*v*w*w +
				3.0*b021*u*u*v + 3.0*b102*v*v*w + 3.0*b012*u*v*v +
				6.0*b111*u*v*w;

	float v12 = 2. * dot( p2-p1, n1+n2 ) / dot( p2-p1, p2-p1 );
	float v23 = 2. * dot( p3-p2, n2+n3 ) / dot( p3-p2, p3-p2 );
	float v31 = 2. * dot( p1-p3, n3+n1 ) / dot( p1-p3, p1-p3 );
	vec3 n200 = n1;
	vec3 n020 = n2;
	vec3 n002 = n3;
	vec3 n110 = normalize( n1 + n2 - v12*(p2-p1) );
	vec3 n011 = normalize( n2 + n3 - v23*(p3-p2) );
	vec3 n101 = normalize( n3 + n1 - v31*(p1-p3) );

	//tes_out.normal0 = mat3(transpose(inverse(model)))*(n200*w*w + n020*u*u + n002*v*v + n110*w*u + n011*u*v + n101*w*v);
	tes_out.normal0 = n200*w*w + n020*u*u + n002*v*v + n110*w*u + n011*u*v + n101*w*v;
	//tes_out.normal0		= gl_TessCoord.x * tes_in[0].normal0		+ gl_TessCoord.y * tes_in[1].normal0		+ gl_TessCoord.z * tes_in[2].normal0;

	/*
	vec4 position = (	gl_TessCoord.x * gl_in[0].gl_Position
					 +	gl_TessCoord.y * gl_in[1].gl_Position
					 +	gl_TessCoord.z * gl_in[2].gl_Position
					);
	*/
	vec4 position = evaluate_patch(gl_TessCoord.xyz);

	if ( i_normal_viewer == 0 )
	    gl_Position = projection * vec4(xyz, 1);
		//gl_Position = projection * position;

	if ( i_normal_viewer == 1 )
		gl_Position = vec4(xyz, 1);

	////////////////////////////////////////////////////////////////////
	/*
	// 필수적 내용, 위치 재연산
	// TES Output Topologies: the Triangle Pattern
	// u + v + w = 1
	vec3 p = gl_in[0].gl_Position.xyz;
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	vec3 p0 = u * gl_in[0].gl_Position.xyz;
	vec3 p1 = v * gl_in[1].gl_Position.xyz;
	vec3 p2 = w * gl_in[2].gl_Position.xyz;

	gl_Position = vec4(p0+p1+p2, 1);
	*/
	////////////////////////////////////////////////////////////////////
		
	/*
	vec4 position = (	gl_TessCoord.x * gl_in[0].gl_Position
					 +	gl_TessCoord.y * gl_in[1].gl_Position
					 +	gl_TessCoord.z * gl_in[2].gl_Position
					);

	//gl_Position = MVP * position;
	//gl_Position = position;
	*/

	//////////////////////////////////////////////////////////////////////////////

	// smooth shading
	tes_out.texCoord0	= gl_TessCoord.x * tes_in[0].texCoord0		+ gl_TessCoord.y * tes_in[1].texCoord0		+ gl_TessCoord.z * tes_in[2].texCoord0;
	//tes_out.normal0		= gl_TessCoord.x * tes_in[0].normal0		+ gl_TessCoord.y * tes_in[1].normal0		+ gl_TessCoord.z * tes_in[2].normal0;
	tes_out.FragPos		= gl_TessCoord.x * tes_in[0].FragPos		+ gl_TessCoord.y * tes_in[1].FragPos		+ gl_TessCoord.z * tes_in[2].FragPos;

}


////////////////////////////////////////////////////////////////////////////////
	// [[[[[[[ temp ]]]]]]]
	/*
	mat4 MVP = projection * view *  model;

	// u + v + w = 1
	//vec3 p = gl_in[0].gl_Position.xyz;
	//float u = gl_TessCoord.x;
	//float v = gl_TessCoord.y;
	//float w = gl_TessCoord.z;
	*/

	/*
	const float epsilon = 0.001;
	vec4 p1 = evaluate_patch(gl_TessCoord.xy);
	vec4 p2 = evaluate_patch(gl_TessCoord.xy + vec2(0.0, epsilon));
	vec4 p3 = evaluate_patch(gl_TessCoord.xy + vec2(epsilon, 0.0));

	vec3 v1 = normalize(p2.xyz - p1.xyz);
	vec3 v2 = normalize(p3.xyz - p1.xyz);

	tes_out.normal0 = cross(v1, v2);
	
	gl_Position = p1;
	*/

	/*
	vec4 position = (	gl_TessCoord.x * gl_in[0].gl_Position
					 +	gl_TessCoord.y * gl_in[1].gl_Position
					 +	gl_TessCoord.z * gl_in[2].gl_Position
					);

	//gl_Position = MVP * position;
	gl_Position = position;

	*/

	/*
	// smooth shading
	tes_out.texCoord0	= gl_TessCoord.x * tes_in[0].texCoord0		+ gl_TessCoord.y * tes_in[1].texCoord0		+ gl_TessCoord.z * tes_in[2].texCoord0;
	tes_out.normal0		= gl_TessCoord.x * tes_in[0].normal0		+ gl_TessCoord.y * tes_in[1].normal0		+ gl_TessCoord.z * tes_in[2].normal0;
	tes_out.FragPos		= gl_TessCoord.x * tes_in[0].FragPos		+ gl_TessCoord.y * tes_in[1].FragPos		+ gl_TessCoord.z * tes_in[2].FragPos;
	*/

	/*
	// flat shading
	tes_out.texCoord0	= ( tes_in[0].texCoord0		+ tes_in[1].texCoord0	+ tes_in[2].texCoord0	) / 3.0;
	tes_out.normal0		= ( tes_in[0].normal0		+ tes_in[1].normal0		+ tes_in[2].normal0		) / 3.0;
	tes_out.FragPos		= (	tes_in[0].FragPos		+ tes_in[1].FragPos		+ tes_in[2].FragPos		) / 3.0;
	*/
////////////////////////////////////////////////////////////////////////////////

/*
	// [[[[[[[ PN Triangles ]]]]]]]

	//http://web.engr.oregonstate.edu/~mjb/cs519/Handouts/tessellation.1pp.pdf
	
	vec3 p1 = gl_in[0].gl_Position.xyz;
	vec3 p2 = gl_in[1].gl_Position.xyz;
	vec3 p3 = gl_in[2].gl_Position.xyz;

	vec3 n1 = tes_in[0].normal0;
	vec3 n2 = tes_in[1].normal0;
	vec3 n3 = tes_in[2].normal0;

	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	vec3 b300 = p1;
	vec3 b030 = p2;
	vec3 b003 = p3;
	float w12 = dot( p2 - p1, n1 );
	float w21 = dot( p1 - p2, n2 );
	float w13 = dot( p3 - p1, n1 );
	float w31 = dot( p1 - p3, n3 );
	float w23 = dot( p3 - p2, n2 );
	float w32 = dot( p2 - p3, n3 );

	vec3 b210 = ( 2.*p1 + p2 - w12*n1 ) / 3.;
	vec3 b120 = ( 2.*p2 + p1 - w21*n2 ) / 3.;
	vec3 b021 = ( 2.*p2 + p3 - w23*n2 ) / 3.;
	vec3 b012 = ( 2.*p3 + p2 - w32*n3 ) / 3.;
	vec3 b102 = ( 2.*p3 + p1 - w31*n3 ) / 3.;
	vec3 b201 = ( 2.*p1 + p3 - w13*n1 ) / 3.;
	vec3 ee = ( b210 + b120 + b021 + b012 + b102 + b201 ) / 6.;
	vec3 vv = ( p1 + p2 + p3 ) / 3.;
	vec3 b111 = ee + ( ee - vv ) / 2.;

	vec3 xyz =  1.*b300*w*w*w + 1.*b030*u*u*u + 1.*b003*v*v*v +
				3.*b210*u*w*w + 3.*b120*u*u*w + 3.*b201*v*w*w +
				3.*b021*u*u*v + 3.*b102*v*v*w + 3.*b012*u*v*v +
				6.*b111*u*v*w;

	float v12 = 2. * dot( p2-p1, n1+n2 ) / dot( p2-p1, p2-p1 );
	float v23 = 2. * dot( p3-p2, n2+n3 ) / dot( p3-p2, p3-p2 );
	float v31 = 2. * dot( p1-p3, n3+n1 ) / dot( p1-p3, p1-p3 );
	vec3 n200 = n1;
	vec3 n020 = n2;
	vec3 n002 = n3;
	vec3 n110 = normalize( n1 + n2 - v12*(p2-p1) );
	vec3 n011 = normalize( n2 + n3 - v23*(p3-p2) );
	vec3 n101 = normalize( n3 + n1 - v31*(p1-p3) );

	tes_out.normal0 = n200*w*w + n020*u*u + n002*v*v + n110*w*u + n011*u*v + n101*w*v;
	tes_out.texCoord0	= gl_TessCoord.x * tes_in[0].texCoord0		+ gl_TessCoord.y * tes_in[1].texCoord0		+ gl_TessCoord.z * tes_in[2].texCoord0;
	//tes_out.FragPos		= gl_TessCoord.x * tes_in[0].FragPos		+ gl_TessCoord.y * tes_in[1].FragPos		+ gl_TessCoord.z * tes_in[2].FragPos;


	//gl_Position = vec4( xyz, 1. );
	vec4 position = (	gl_TessCoord.x * gl_in[0].gl_Position
					 +	gl_TessCoord.y * gl_in[1].gl_Position
					 +	gl_TessCoord.z * gl_in[2].gl_Position
					);

	gl_Position = position;
	//gl_Position = vec4( xyz, 1.0);

*/